var search_data = {"index":{"searchIndex":["mmerge","mmergelinear","valueenumeratorpair","testmmerge","<=>()","calc_display_stats()","generate_data()","get_cfg()","main()","main()","main_func()","minptrix()","multimerge()","multimerge_pq()","new()","new()","stopwatch()","verify_small_data()","makefile","readme","rout","created.rid","runrspec","testdata","timing"],"longSearchIndex":["mmerge","mmerge::mmergelinear","mmerge::valueenumeratorpair","testmmerge","mmerge::valueenumeratorpair#<=>()","testmmerge::calc_display_stats()","testmmerge::generate_data()","testmmerge::get_cfg()","mmerge::main()","testmmerge::main()","testmmerge::main_func()","mmerge::mmergelinear#minptrix()","mmerge::multimerge()","mmerge::multimerge_pq()","mmerge::mmergelinear::new()","mmerge::valueenumeratorpair::new()","testmmerge::stopwatch()","testmmerge::verify_small_data()","","","","","","",""],"info":[["MMerge","","MMerge.html","","<p>Functions to merge sorted arrays of integers. ruby/mmerge.rb rev. 22 July\n2013 by Stuart Ambler. Copyright …\n"],["MMerge::MMergeLinear","","MMerge/MMergeLinear.html","","<p>Supports the linear method for k-way merge.\n"],["MMerge::ValueEnumeratorPair","","MMerge/ValueEnumeratorPair.html","","<p>Class for objects for priority queue for multimerge.\n"],["TestMMerge","","TestMMerge.html","","<p>Unit and timing test for ruby/mmerge.rb. ruby/testmmerge.rb rev. 29 July\n2013 by Stuart Ambler. Copyright …\n"],["<=>","MMerge::ValueEnumeratorPair","MMerge/ValueEnumeratorPair.html#method-i-3C-3D-3E","(other)",""],["calc_display_stats","TestMMerge","TestMMerge.html#method-c-calc_display_stats","(lens, ave_input_len)","<p>Calculate and print statistics for array of ints.\n\n<pre>Args: lens array of ints\n      ave_input_len requested ...</pre>\n"],["generate_data","TestMMerge","TestMMerge.html#method-c-generate_data","(nr_inputs, ave_input_len)","<p>Generate test data.\n\n<pre>Args: nr_inputs number of sorted input arrays to generate  ,\n      ave_input_len average ...</pre>\n"],["get_cfg","TestMMerge","TestMMerge.html#method-c-get_cfg","(max_nr_input_ints, default_nr_inputs, default_ave_input_len)","<p>Process command-line arguments.\n\n<pre>Args: max_nr_input_ints maximum total number of elements to be merged. ...</pre>\n"],["main","MMerge","MMerge.html#method-c-main","()",""],["main","TestMMerge","TestMMerge.html#method-c-main","()","<p>testmmerge main to test k-way merges. Args: none Returns: exit code Usage: \n./testmmerge.rb [args to …\n"],["main_func","TestMMerge","TestMMerge.html#method-c-main_func","()","<p>Test k-way merge; called by main.\n\n<pre>Args: none.\nReturns: nothing.</pre>\n"],["minptrix","MMerge::MMergeLinear","MMerge/MMergeLinear.html#method-i-minptrix","(enums)","<p>Finds minimum value for any of an array of enumerators,\n\n<pre>Args: enums array of enumerators of integers (side-effect: ...</pre>\n"],["multimerge","MMerge","MMerge.html#method-c-multimerge","(arrays)","<p>Multimerge, linear in k, the number of arrays.\n\n<pre>Args: array of arrays.\nReturns: an array.</pre>\n<p>Each element of …\n"],["multimerge_pq","MMerge","MMerge.html#method-c-multimerge_pq","(arrays)","<p>Multimerge using priority queue.\n\n<pre>Args: array of arrays.\nReturns: an array.</pre>\n<p>Each element of array must be …\n"],["new","MMerge::MMergeLinear","MMerge/MMergeLinear.html#method-c-new","(enums)","<p>Initialize instance variables.\n\n<pre>Args: enums array of enumerators (external iterators); used for minptrix.</pre>\n"],["new","MMerge::ValueEnumeratorPair","MMerge/ValueEnumeratorPair.html#method-c-new","(val, enum)",""],["stopwatch","TestMMerge","TestMMerge.html#method-c-stopwatch","(start_time, start, label)","<p>Times intervals.\n\n<pre>Args: start_time is a array to allow modification as well as retrieval,\n      bool start ...</pre>\n"],["verify_small_data","TestMMerge","TestMMerge.html#method-c-verify_small_data","()","<p>Test data small enough to verify by hand.\n\n<pre>Args: none.\nReturns: true if merge output Ok</pre>\n"],["Makefile","","Makefile.html","","<p># ruby/Makefile rev. 24 July 2013 by Stuart Ambler. # Copyright © 2013\nStuart Ambler. # Distributed …\n"],["README","","README_md.html","","<p>ruby/README.md rev. 31 July 2013 by Stuart Ambler.\nCopyright (c) 2013\nStuart Ambler.\nDistributed under ...\n"],["Rout","","Rout_txt.html","","<p>17 points pq  ~=  -2.303e+00 +   1.948e-06 * log(k) * n 12 points lin  ~=  \n6.535e-01 +   2.052e-07 * …\n"],["created.rid","","doc/created_rid.html","",""],["runrspec","","runrspec.html","","<p>#!/bin/sh # ruby/runrspec.rb rev. 23 July 2013 by Stuart Ambler. #\nCopyright © 2013 Stuart Ambler. …\n"],["testdata","","testdata_txt.html","","\n<pre>  k   each          n      pq     lin   heapq\n 10  10000     108302    0.47    0.49      NA\n 20  10000 ...</pre>\n"],["timing","","timing_txt.html","","<p>ruby/timing.txt rev. 31 July 2013 by Stuart Ambler. Copyright © 2013 Stuart\nAmbler. Distributed under …\n"]]}}